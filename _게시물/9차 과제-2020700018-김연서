ML 모델을 사용하는 웹 앱 빌드
이 강의에서는 NUFORC의 데이터베이스에서 가져온 지난 세기 동안 UFO 목격 과 같은 이 세상에 없는 데이터 세트에 대한 ML 모델을 훈련할 것입니다 .

당신은 배울 것이다:

훈련된 모델을 '피클'하는 방법
Flask 앱에서 해당 모델을 사용하는 방법
우리는 계속해서 노트북을 사용하여 데이터를 정리하고 모델을 훈련할 것이지만 '야생에서', 말하자면 웹 앱에서 모델을 사용하여 프로세스를 한 단계 더 발전시킬 수 있습니다.

이렇게 하려면 Flask를 사용하여 웹 앱을 빌드해야 합니다.

강의 전 퀴즈
앱 빌드
기계 학습 모델을 사용하는 웹 앱을 빌드하는 방법에는 여러 가지가 있습니다. 웹 아키텍처는 모델이 학습되는 방식에 영향을 줄 수 있습니다. 데이터 과학 그룹이 앱에서 사용하기를 원하는 모델을 훈련시킨 비즈니스에서 일하고 있다고 상상해 보십시오.

고려 사항
다음과 같은 많은 질문을 해야 합니다.

웹 앱인가요 모바일 앱인가요? 모바일 앱을 빌드 중이거나 IoT 컨텍스트에서 모델을 사용해야 하는 경우 TensorFlow Lite 를 사용하고 Android 또는 iOS 앱에서 모델을 사용할 수 있습니다.
모델은 어디에 상주할 것인가? 클라우드 또는 로컬에서?
오프라인 지원. 앱이 오프라인에서 작동해야 합니까?
모델 훈련에 어떤 기술이 사용되었습니까? 선택한 기술은 사용해야 하는 도구에 영향을 줄 수 있습니다.
텐서플로우 사용. 예를 들어 TensorFlow를 사용하여 모델을 훈련하는 경우 해당 생태계는 TensorFlow.js를 사용하여 웹 앱에서 사용할 TensorFlow 모델을 변환하는 기능을 제공 합니다 .
파이토치 사용. PyTorch 와 같은 라이브러리를 사용하여 모델을 빌드하는 경우 Onnx 런타임 을 사용할 수 있는 JavaScript 웹 앱에서 사용하기 위해 ONNX (Open Neural Network Exchange) 형식 으로 내보낼 수 있는 옵션이 있습니다 . 이 옵션은 Scikit-learn-trained 모델에 대한 향후 수업에서 탐구할 것입니다.
Lobe.ai 또는 Azure Custom Vision 사용. Lobe.ai 또는 Azure Custom Vision 과 같은 ML SaaS(Software as a Service) 시스템을 사용 하여 모델을 훈련하는 경우 이 유형의 소프트웨어는 쿼리할 맞춤형 API 구축을 포함하여 많은 플랫폼에 대해 모델을 내보내는 방법을 제공합니다. 온라인 애플리케이션을 통해 클라우드에서
또한 웹 브라우저에서 모델 자체를 교육할 수 있는 전체 Flask 웹 앱을 빌드할 수 있습니다. 이것은 JavaScript 컨텍스트에서 TensorFlow.js를 사용하여 수행할 수도 있습니다.

우리의 목적을 위해 Python 기반 노트북으로 작업했기 때문에 이러한 노트북에서 학습된 모델을 Python 빌드 웹 앱에서 읽을 수 있는 형식으로 내보내는 데 필요한 단계를 살펴보겠습니다.

도구
이 작업에는 Python에서 실행되는 Flask와 Pickle의 두 가지 도구가 필요합니다.

✅플라스크 는 무엇입니까 ? 제작자가 '마이크로 프레임워크'로 정의한 Flask는 Python을 사용하여 웹 프레임워크의 기본 기능과 웹 페이지를 빌드하는 템플릿 엔진을 제공합니다. 이 학습 모듈 을 살펴보고 Flask로 빌드를 연습하세요.

✅피클 이 뭔가요 ? 간물🥒Python 객체 구조를 직렬화 및 역직렬화하는 Python 모듈입니다. 모델을 '피클'하면 웹에서 사용하기 위해 구조를 직렬화하거나 평면화합니다. 주의: 피클은 본질적으로 안전하지 않으므로 파일을 '피클 해제'하라는 메시지가 표시되면 주의하십시오. 절인 파일에는 접미사가 .pkl있습니다.

운동 - 데이터 정리
이 단원에서는 NUFORC (National UFO Reporting Center)에서 수집한 80,000번의 UFO 목격 데이터를 사용합니다. 이 데이터에는 UFO 목격에 대한 몇 가지 흥미로운 설명이 있습니다. 예를 들면 다음과 같습니다.

긴 예제 설명. "밤에 잔디밭을 비추는 한 줄기 빛에서 한 남자가 나타나 텍사스 인스트루먼트 주차장을 향해 달려갑니다."
간단한 예시 설명. "빛이 우리를 쫓았다".
ufos.csv 스프레드시트에는 에 대한 열과 목격이 발생한 위치, 개체 city및 개체 state및 에 대한 열 이 포함 되어 있습니다 .countryshapelatitudelongitude

이 수업에 포함된 공책 에서 :

가져오기 pandas, matplotlib및 numpy이전 수업에서 했던 것처럼 ufos 스프레드시트를 가져옵니다. 샘플 데이터 세트를 살펴볼 수 있습니다.

import pandas as pd
import numpy as np

ufos = pd.read_csv('./data/ufos.csv')
ufos.head()
ufos 데이터를 새로운 제목의 작은 데이터 프레임으로 변환합니다. 필드 의 고유 값을 확인하십시오 Country.

ufos = pd.DataFrame({'Seconds': ufos['duration (seconds)'], 'Country': ufos['country'],'Latitude': ufos['latitude'],'Longitude': ufos['longitude']})

ufos.Country.unique()
이제 null 값을 삭제하고 1-60초 사이의 목격만 가져와서 처리해야 하는 데이터의 양을 줄일 수 있습니다.

ufos.dropna(inplace=True)

ufos = ufos[(ufos['Seconds'] >= 1) & (ufos['Seconds'] <= 60)]

ufos.info()
LabelEncoder국가의 텍스트 값을 숫자로 변환하려면 Scikit-learn의 라이브러리를 가져오세요 .

✅LabelEncoder는 데이터를 알파벳순으로 인코딩합니다.

from sklearn.preprocessing import LabelEncoder

ufos['Country'] = LabelEncoder().fit_transform(ufos['Country'])

ufos.head()
데이터는 다음과 같아야 합니다.

	Seconds	Country	Latitude	Longitude
2	20.0	3		53.200000	-2.916667
3	20.0	4		28.978333	-96.645833
14	30.0	4		35.823889	-80.253611
23	60.0	4		45.582778	-122.352222
24	3.0		3		51.783333	-0.783333
연습 - 모델 구축
이제 데이터를 훈련 및 테스트 그룹으로 나누어 모델을 훈련할 준비를 할 수 있습니다.

X 벡터로 학습하려는 세 가지 기능을 선택하면 y 벡터는 Country. 를 입력하고 국가 ID를 반환할 수 있기를 Seconds원합니다 .LatitudeLongitude

from sklearn.model_selection import train_test_split

Selected_features = ['Seconds','Latitude','Longitude']

X = ufos[Selected_features]
y = ufos['Country']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)
로지스틱 회귀를 사용하여 모델 훈련:

from sklearn.metrics import accuracy_score, classification_report
from sklearn.linear_model import LogisticRegression
model = LogisticRegression()
model.fit(X_train, y_train)
predictions = model.predict(X_test)

print(classification_report(y_test, predictions))
print('Predicted labels: ', predictions)
print('Accuracy: ', accuracy_score(y_test, predictions))
정확도는 당연히 나쁘지 않습니다 ( 약 95%) .CountryLatitude/Longitude

Country생성한 모델 은 Latitude및 에서 추론할 수 있어야 하므로 그다지 혁명적이지 Longitude않지만 정리하고 내보낸 원시 데이터에서 훈련을 시도한 다음 웹 앱에서 이 모델을 사용하는 것은 좋은 연습입니다.

연습 - 모델 '피클'
이제 모델을 피클 할 시간입니다! 몇 줄의 코드로 이를 수행할 수 있습니다. 피클 되면 피클된 모델을 로드하고 초, 위도 및 경도 값을 포함하는 샘플 데이터 배열에 대해 테스트합니다.

import pickle
model_filename = 'ufo-model.pkl'
pickle.dump(model, open(model_filename,'wb'))

model = pickle.load(open('ufo-model.pkl','rb'))
print(model.predict([[50,44,-12]]))
모델은 영국의 국가 코드인 '3' 을 반환합니다. 야생의!👽

연습 - Flask 앱 빌드
이제 Flask 앱을 ​​빌드하여 모델을 호출하고 유사한 결과를 반환하지만 시각적으로 더 만족스러운 방식으로 반환할 수 있습니다.

ufo-model.pkl 파일이 있는 notebook.ipynb 파일 옆에 web-app 이라는 폴더를 생성하여 시작 합니다.

그 폴더에 세 개의 폴더를 더 만듭니다. static , 안에 css 폴더가 있고 템플릿 . 이제 다음 파일과 디렉터리가 있어야 합니다.

web-app/
  static/
    css/
  templates/
notebook.ipynb
ufo-model.pkl
✅완성된 앱 보기는 솔루션 폴더 참조

web-app 폴더 에 생성할 첫 번째 파일 은 requirements.txt 파일입니다. JavaScript 앱의 package.json 과 마찬가지로 이 파일은 앱에 필요한 종속성을 나열합니다. requirements.txt 에 다음 행을 추가하십시오.

scikit-learn
pandas
numpy
flask
이제 web-app 으로 이동하여 이 파일을 실행합니다 .

cd web-app
터미널 유형 pip install에서 requirements.txt 에 나열된 라이브러리를 설치하려면 다음을 입력하세요 .

pip install -r requirements.txt
이제 앱을 완성하기 위해 세 개의 파일을 더 만들 준비가 되었습니다.

루트에 app.py 를 만듭니다 .
템플릿 디렉토리 에 index.html 을 만듭니다 .
static/css 디렉토리 에 styles.css 를 생성 합니다.
몇 가지 스타일로 styles.css 파일을 빌드 합니다.

body {
	width: 100%;
	height: 100%;
	font-family: 'Helvetica';
	background: black;
	color: #fff;
	text-align: center;
	letter-spacing: 1.4px;
	font-size: 30px;
}

input {
	min-width: 150px;
}

.grid {
	width: 300px;
	border: 1px solid #2d2d2d;
	display: grid;
	justify-content: center;
	margin: 20px auto;
}

.box {
	color: #fff;
	background: #2d2d2d;
	padding: 12px;
	display: inline-block;
}
다음으로 index.html 파일 을 빌드 합니다.

<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8">
    <title>🛸 UFO Appearance Prediction! 👽</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='css/styles.css') }}">
  </head>

  <body>
    <div class="grid">

      <div class="box">

        <p>According to the number of seconds, latitude and longitude, which country is likely to have reported seeing a UFO?</p>

        <form action="{{ url_for('predict')}}" method="post">
          <input type="number" name="seconds" placeholder="Seconds" required="required" min="0" max="60" />
          <input type="text" name="latitude" placeholder="Latitude" required="required" />
          <input type="text" name="longitude" placeholder="Longitude" required="required" />
          <button type="submit" class="btn">Predict country where the UFO is seen</button>
        </form>

        <p>{{ prediction_text }}</p>

      </div>

    </div>

  </body>
</html>
이 파일의 템플릿을 살펴보십시오. 예측 텍스트와 같이 앱에서 제공할 변수 주변의 '콧수염' 구문을 확인하세요 {{}}. 경로 에 대한 예측을 게시하는 양식도 있습니다 /predict.

마지막으로, 모델 소비와 예측 표시를 구동하는 Python 파일을 빌드할 준비가 되었습니다.

추가 app.py:

import numpy as np
from flask import Flask, request, render_template
import pickle

app = Flask(__name__)

model = pickle.load(open("./ufo-model.pkl", "rb"))


@app.route("/")
def home():
    return render_template("index.html")


@app.route("/predict", methods=["POST"])
def predict():

    int_features = [int(x) for x in request.form.values()]
    final_features = [np.array(int_features)]
    prediction = model.predict(final_features)

    output = prediction[0]

    countries = ["Australia", "Canada", "Germany", "UK", "US"]

    return render_template(
        "index.html", prediction_text="Likely country: {}".format(countries[output])
    )


if __name__ == "__main__":
    app.run(debug=True)
💡팁: debug=TrueFlask를 사용하여 웹 앱을 실행하는 동안 추가하면 서버를 다시 시작할 필요 없이 애플리케이션에 대한 변경 사항이 즉시 반영됩니다. 조심해! 프로덕션 앱에서 이 모드를 활성화하지 마세요.

실행 python app.py하거나 python3 app.py- 웹 서버가 로컬에서 시작되면 짧은 양식을 작성하여 UFO가 목격된 위치에 대한 불타는 질문에 대한 답변을 얻을 수 있습니다!

그 전에 다음 부분을 살펴보십시오 app.py.

먼저 종속성이 로드되고 앱이 시작됩니다.
그런 다음 모델을 가져옵니다.
그런 다음 index.html이 홈 경로에 렌더링됩니다.
경로 에서 /predict양식이 게시될 때 몇 가지 일이 발생합니다.

양식 변수가 수집되어 numpy 배열로 변환됩니다. 그런 다음 모델로 전송되고 예측이 반환됩니다.
표시하려는 국가는 예상 국가 코드에서 읽을 수 있는 텍스트로 다시 렌더링되고 해당 값은 템플릿에서 렌더링되도록 index.html로 다시 전송됩니다.
Flask 및 절인 모델과 함께 이러한 방식으로 모델을 사용하는 것은 비교적 간단합니다. 가장 어려운 점은 예측을 얻기 위해 모델에 보내야 하는 데이터의 형태를 이해하는 것입니다. 그것은 모두 모델이 어떻게 훈련되었는지에 달려 있습니다. 이것은 예측을 얻기 위해 3개의 데이터 포인트를 입력해야 합니다.

전문적인 환경에서는 모델을 교육하는 사람들과 웹 또는 모바일 앱에서 모델을 소비하는 사람들 사이에 얼마나 좋은 커뮤니케이션이 필요한지 알 수 있습니다. 우리의 경우 단 한 사람, 당신입니다!
